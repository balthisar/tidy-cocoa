//
// SwLibTidy Tests-Shared.xcconfig
//
//  Created by Jim Derry on 2017/10/20 with help by BuildSettingExtractor
//


// Enable Modules (C and Objective-C)
// 
// Enables the use of modules for system APIs.  System headers are imported as semantic
// modules instead of raw headers.  This can result in faster builds and project
// indexing.

CLANG_ENABLE_MODULES = YES



// Combine High Resolution Artwork
// 
// Combines image files at different resolutions into one multi-page TIFF file that is
// HiDPI compliant for macOS 10.7 and later. Only image files in the same directory and
// with the same base name and extension are combined. The file names must conform to the
// naming convention used in HiDPI.

COMBINE_HIDPI_IMAGES = YES



// C Language Dialect
// 
// Choose a standard or non-standard C language dialect.
// 
// ANSI C: Accept ISO C90 and ISO C++, turning off GNU extensions that are incompatible.
// [-ansi]
// 
// Incompatible GNU extensions include the 'asm', 'inline', and 'typeof' keywords (but
// not the equivalent __asm__, __inline__, and __typeof__ forms), and the '//' syntax for
// comments.
// 
// This setting also enables trigraphs.
// 
// C89: Accept ISO C90 (1990), but not GNU extensions. [-std=c89]
// 
// GNU89: Accept ISO C90 and GNU extensions. [-std=gnu89]
// 
// C99: Accept ISO C99 (1999), but not GNU extensions. [-std=c99]
// 
// GNU99: Accept ISO C99 and GNU extensions. [-std=gnu99]
// 
// C11: Accept ISO C11 (2011), but not GNU extensions. [-std=c11]
// 
// GNU11: Accept ISO C11 and GNU extensions. [-std=gnu11]
// 
// Compiler Default: Tells the compiler to use its default C language dialect. This is
// normally the best choice unless you have specific needs. (Currently equivalent to
// GNU99.)
// 
// Please see the full GCC manual for the full definition of all these settings on the C
// dialect:
// 
// <http://developer.apple.com/documentation/DeveloperTools/gcc-4.2.1/gcc/C-Dialect-Options.html>

GCC_C_LANGUAGE_STANDARD = gnu89



// Info.plist File
// 
// The project-relative path to the plist file that contains the `Info.plist` information
// used by bundles. For details on information property list files, see “[Information
// Property List
// Files](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPRuntimeConfig/Articles/ConfigFiles.html#//apple_ref/doc/uid/20002091-CJBJIEDH)”
// in [Runtime Configuration
// Guidelines](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPRuntimeConfig/000-Introduction/introduction.html).

INFOPLIST_FILE = SwLibTidyTests/Info.plist



// Runpath Search Paths
// 
// This is a list of paths to be added to the runpath search path list for the image
// being created.  At runtime, dyld uses the runpath when searching for dylibs whose load
// path begins with '@rpath/'. See [Dynamic Library Programming
// Topics](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/DynamicLibraries/000-Introduction/Introduction.html).

LD_RUNPATH_SEARCH_PATHS = $(inherited) @executable_path/../Frameworks @loader_path/../Frameworks



// Product Bundle Identifier
// 
// A string that uniquely identifies the bundle. The string should be in reverse DNS
// format using only alphanumeric characters (A-Z, a-z, 0-9), the dot (“.”), and the
// hyphen (“-”). This value is used as the CFBundleIdentifier in the Info.plist of the
// built bundle.

PRODUCT_BUNDLE_IDENTIFIER = com.balthisar.LibTidyTests



// Product Name
// 
// This is the basename of the product generated by the target.

PRODUCT_NAME = $(TARGET_NAME)



// Import Paths
// 
// A list of paths to be searched by the Swift compiler for additional Swift modules.

SWIFT_INCLUDE_PATHS = 



// Swift Language Version
// 
// 

SWIFT_VERSION = 4.0
