//
// SwLibTidy-Shared.xcconfig
//
//  Created by Jim Derry on 2017/10/20 with help by BuildSettingExtractor
//


//////////////////////////////////////////////////////////
// Framework Setup and Configuration
//////////////////////////////////////////////////////////

INFOPLIST_FILE = SwLibTidy/Info.plist
PRODUCT_BUNDLE_IDENTIFIER = com.balthisar.SwLibTidy
PRODUCT_NAME = $(TARGET_NAME:c99extidentifier)


//////////////////////////////////////////////////////////
// Code Signing - Required on iOS
//////////////////////////////////////////////////////////

CODE_SIGN_IDENTITY[sdk=iphoneos*] = iPhone Developer
CODE_SIGN_STYLE[sdk=iphoneos*] = Automatic
DEVELOPMENT_TEAM[sdk=iphoneos*] = 9PN2JXXG7Y


//////////////////////////////////////////////////////////
// Cross Platform setup
//////////////////////////////////////////////////////////

SUPPORTED_PLATFORMS = iphonesimulator iphoneos macosx
VALID_ARCHS[sdk=macosx*] = x86_64
VALID_ARCHS[sdk=iphoneos*] = arm64 armv7 armv7s
VALID_ARCHS[sdk=iphonesimulator*] = i386 x86_64


//////////////////////////////////////////////////////////
// Library and Module Setup
//////////////////////////////////////////////////////////

// Defines Module. We'll let Xcode generate the module automatically. This
// enables the use of a simple import SwLibTidy.
DEFINES_MODULE = YES

// Note that we are tracking LibTidy's major version 5, which is implied
// below. For example, 5.7 refers to LibTidy 5.5.70 and better. This makes
// it difficult to support versions such at 5.78, as we are limited to
// supporting only 5.70 and better, given the decimal nature of this setting.
DYLIB_COMPATIBILITY_VERSION = 5.7
DYLIB_CURRENT_VERSION = 5.7

// Framework Version
FRAMEWORK_VERSION = A

// Installation Directory. This framework can be installed anywhere.
INSTALL_PATH = @rpath


//////////////////////////////////////////////////////////
// Linking
//////////////////////////////////////////////////////////

// On macOS, we support console applications, so we have to be sure that
// this framework does NOT include the Swift Standard Library dylibs, but
// that we static link the dylibs into our framework's dylib. The symbols
// we be exported, so the main executable can still dynamically link to it.
//
// On iOS, though we don't have these issues with console applications because
// we *always* have a bundle, so we will build normally.
//
// Your projects are probably more complicated, and so you're going to have
// to figure out which frameworks are ALSO including the Swift Standard Library.
// This sucks for now, but it's a consequence of macOS not including the
// Standard Library as part of the OS during Swift's development.
ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = NO


// Since this framework depends on libtidy-sw.dylib, it could be in various
// locations, and so this path supports those possibilities, in the specified
// order.
//   /usr/local/lib is a traditional spot for pure Unix dylibs. If the dylib
//     is found here, it will be used first. This allows users to upgrade Tidy
//     without any input from the developer, if they know they can.
//
//   @executable_path/../Frameworks is where a macOS application might have put
//     the dylib, overriding the dylib produced by this framework. This gives
//     developers the chance to include their own versions of dylibs.
//
//  @executable_path/Frameworks is where an iOS application might have put the
//    dylib, override the dylib included in this framework.
//
//   @loader_path is where we put libtidy-sw.dylib, where is resides side-by-
//     side with this framework's dylib.
//
// Note that dylibs and frameworks in /Library/Frameworks/ and
// ~/Library/Frameworks/ would be detected automatically, too.

LD_RUNPATH_SEARCH_PATHS = $(inherited) /usr/local/lib @executable_path/../Frameworks @executable_path/Frameworks @loader_path
