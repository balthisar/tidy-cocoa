/******************************************************************************

	SwLibTidy.swift
    Part of the SwLibTidy wrapper library for tidy-html5 ("CLibTidy").
    See https://github.com/htacg/tidy-html5

    Copyright Â© 2107 by HTACG. All rights reserved.
    Created by Jim Derry 2017; copyright assigned to HTACG. Permission to use
    this source code per the W3C Software Notice and License:
    https://www.w3.org/Consortium/Legal/2002/copyright-software-20021231

    Provides a strictly procedural wrapper to CLibTidy in order to simplify
    the use of CLibTidy in Swift console and GUI applications. Chiefly among
    its goals is to:
      - Use Swift-native types whereever possible.
      - Provide arrays or structures of information instead of depending on
        CLibTidy's iterators.
      - Simplify callbacks and appdata by abstracting C implementation details
        into Swift-friendly form.
      - Maintain full compatibility with Objective-C.
 
    Unsupported APIs
      Support for custom memory allocators is currently missing; CLibTidy will
      use its default memory allocators. Custom memory allocators, if needed,
      are best written in C for compatibility.
 
      No support for custom input and output sinks is present, and it's very
      unlikely that they would be needed for a modern, full-featured operating
      system. If needed, they are best written in C for compatibility.
 
      TidyReportFilter and TidyReportCallback are not supported as being
      deprecated (although not yet marked as such in CLibTidy source). Instead,
      use the modern, extensible TidyMessageCallback features that this library
      wraps.
 
    Important Linking Notes:
      Note that GUI apps should simply link to this framework; the framework
      will become part of your application bundle and be dynamically linked.

      Console apps are simpler to manage when they're static linked, however.
      In that case, don't use this framework as a framework. Simply include
      this file as part of your console application, and static link the
      tidy-html5 static library target.
 
      Console apps can use the framework, but you have to manage the framework
      installation strategies yourself.
 
      When the Swift ABI is stable, it will be possible to include this file
      as part of a static library, but until then, statically-bound console
      applications are subject to this limitation.
 
    Compiling Notes
      The tidy-html5 target uses tidy-html5 as distributed, and that project
      keeps track of version numbers in `version.txt`. Thus the tidy-html5
      target in this project "compiles" `version.txt` using a build rule that
      generates `tidy-html5-version.h` with the correct version number and
      release date, which is then used via Build Settings -> Prefix Target.
 
    Reference Notes
      There's no substitute for reading the source code, particularly CLibTidy
      public header files in order to understand all of the possible C enum
      values and their meanings.

 ******************************************************************************/

import Foundation
import CLibTidy


/******************************************************************************
 ** Instances of these types are returned by LibTidy API functions, however
 ** they are opaque; you cannot see into them, and must use accessor functions
 ** to access the contents.
 **************************************************************************** */
// MARK: - Opaque Types


/**
 Instances of this represent a Tidy document, which encapsulates everything
 there is to know about a single Tidy session. Many of the API functions
 return instance of TidyDoc, or expect instances as parameters.
*/
public typealias TidyDoc = CLibTidy.TidyDoc

/**
 Instances of this represent a Tidy configuration option, which contains
 useful data about these options. Functions related to configuration options
 return or accept instances of this type.
*/
public typealias TidyOption = CLibTidy.TidyOption

/** 
 Single nodes of a TidyDocument are represented by this datatype. It can be
 returned by various API functions, or accepted as a function argument.
*/
public typealias TidyNode = CLibTidy.TidyNode

/**
 Attributes of a TidyNode are represented by this data type. The public API
 functions related to attributes work with this type.
*/
public typealias TidyAttr = CLibTidy.TidyAttr

/**
 Instances of this type represent messages generated by Tidy in reference
 to your document. This API is available in some of Tidy's message callback
 functions.
*/
public typealias TidyMessage = CLibTidy.TidyMessage

/** 
 Instances of this type represent the arguments that compose part of the
 message represented by TidyMessage. These arguments have an API to query
 information about them.
*/
public typealias TidyMessageArgument = CLibTidy.TidyMessageArgument


// MARK: - Basic Operations -

// MARK: Instantiation and Destruction


/**
 The primary creation of a document instance. Instances of a `TidyDoc` are used
 throughout the API as a token to represent a particular document. When done
 using a `TidyDoc` instance, be sure to `tidyRelease(myTidyDoc)` in order
 to free related memory.
 
 - returns:
     Returns a `TidyDoc` instance.
*/
public func tidyCreate() -> TidyDoc {
    
    let tdoc: TidyDoc! = CLibTidy.tidyCreate()

    // Create some extra storage to attach to Tidy's AppData.
    let appData: ApplicationData = ApplicationData.init()

    // Convert it to a pointer that we can store, increasing the retain count.
    let ptr = UnsafeMutableRawPointer( Unmanaged.passRetained(appData).toOpaque() )

    // Now attach it to Tidy's AppData.
    CLibTidy.tidySetAppData(tdoc, ptr)
    
    return tdoc
}

/**
 Free all memory and release the `TidyDoc`. The `TidyDoc` cannot be used after
 this call.
 
 - parameters:
   - tdoc: The `TidyDoc` to free.
*/

public func tidyRelease( _ tdoc: TidyDoc ) {
    
    // Release our auxilliary structure.
    if let ptr = CLibTidy.tidyGetAppData(tdoc) {
        
        // Decreasing the retain count should cause it to dealloc.
        let _: ApplicationData = Unmanaged<ApplicationData>
            .fromOpaque(ptr)
            .takeRetainedValue()
    }

    CLibTidy.tidyRelease( tdoc )
}


// MARK: Host Application Data


/**
 Allows the host application to store a reference to an object instance with
 each `TidyDoc` instance. This can be useful for callbacks, such as saving a
 reference to `self` within the Tidy document. Because callbacks in Swift can
 only call back to a global function (not an instance method), it will be
 useful to know (in your callback) which instance of your class generated the
 callback.
 
 - parameters:
   - tdoc: The `TidyDoc` for which you are setting the reference.
   - appData: A reference to self.
*/
public func tidySetAppData( _ tdoc: TidyDoc, _ appData: AnyObject ) {
    
    // Turn our opaque reference to an ApplicationData into a real instance.
    guard let ptrStorage = CLibTidy.tidyGetAppData(tdoc) else { return }
    
    let storage: ApplicationData = Unmanaged<ApplicationData>
        .fromOpaque(ptrStorage)
        .takeUnretainedValue()

    storage.appData = appData
}

/**
 Returns the reference previously stored with `tidySetAppData()`.
 
 - parameters:
   - tdoc: document where data has been stored.
 - returns:
     The reference to the object previously stored.
*/
public func tidyGetAppData( _ tdoc: TidyDoc ) -> AnyObject? {
    
    // Let's turn our opaque reference to an ApplicationData into an instance.
    guard let ptrStorage = CLibTidy.tidyGetAppData(tdoc) else { return nil }
    
    let storage: ApplicationData = Unmanaged<ApplicationData>
        .fromOpaque(ptrStorage)
        .takeUnretainedValue()
    
    return storage.appData
}


// MARK: CLibTidy Version Information


/** 
 Get the release date for the current library.
 
 - returns: 
     The string representing the release date.
*/
public func tidyReleaseDate() -> String {
    
    return String( cString: CLibTidy.tidyReleaseDate() )
}

/** 
 Get the version number for the current library.
 
 - returns:
     The string representing the version number.
*/
public func tidyLibraryVersion() -> String {
    
    return String( cString: CLibTidy.tidyLibraryVersion() )
}


// MARK: - Diagnostics and Repair Status

/**
 Get status of current document.
 
 - parameters:
   - tdoc: An instance of a `TidyDoc` to query.
 - returns: 
     Returns the highest of `2` indicating that errors were present in the
     docment, `1` indicating warnings, and `0` in the case of everything
     being okay.
*/
public func tidyStatus( _ tdoc: TidyDoc ) -> Int {
    
    return Int(CLibTidy.tidyStatus( tdoc ))
}

/** 
 Gets the version of HTML that was output, as an integer, times 100. For
 example, HTML5 will return 500; HTML4.0.1 will return 401.
 
 - parameters:
   - tdoc: An instance of a `TidyDoc` to query.
 - returns:
     Returns the HTML version number (x100).
*/
public func tidyDetectedHtmlVersion( _ tdoc: TidyDoc ) -> Int {
    
    return Int(CLibTidy.tidyDetectedHtmlVersion( tdoc ))
}


/**
 Indicates whether the output document is or isn't XHTML.
 
 - parameters:
   - tdoc: An instance of a `TidyDoc` to query.
 - returns:
     Returns `true` if the document is an XHTML type.
*/
public func tidyDetectedXhtml( _ tdoc: TidyDoc ) -> Swift.Bool {

    return CLibTidy.tidyDetectedXhtml( tdoc ) == yes ? true : false
}


/**
 Indicates whether or not the input document was XML. If `TidyXml` tags is
 true, or there was an XML declaration in the input document, then this
 function will return `true`.
 
 - parameters:
   - tdoc: An instance of a `TidyDoc` to query.
 - returns:
     Returns `true` if the input document was XML.
*/
public func tidyDetectedGenericXml( _ tdoc: TidyDoc ) -> Swift.Bool {
    
    return CLibTidy.tidyDetectedGenericXml( tdoc ) == yes ? true : false
}


/**
 Indicates the number of `TidyError` messages that were generated. For any
 value greater than `0`, output is suppressed unless `TidyForceOutput` is set.
 
 - parameters
   - tdoc: An instance of a `TidyDoc` to query.
 - returns:
     Returns the number of `TidyError` messages that were generated.
*/
public func tidyErrorCount( _ tdoc: TidyDoc ) -> UInt {
    
    return UInt(CLibTidy.tidyErrorCount( tdoc ))
}

/**
 Indicates the number of `TidyWarning` messages that were generated.
 
 - parameters:
   - tdoc: An instance of a `TidyDoc` to query.
 - returns: 
     Returns the number of `TidyWarning` messages that were generated.
*/
public func tidyWarningCount( _ tdoc: TidyDoc ) -> UInt {
    
    return UInt(CLibTidy.tidyWarningCount( tdoc ))
}


/**
 Indicates the number of `TidyAccess` messages that were generated.
 
 - parameters:
   - tdoc: An instance of a `TidyDoc` to query.
 - returns:
     Returns the number of `TidyAccess` messages that were generated.
*/
public func tidyAccessWarningCount( _ tdoc: TidyDoc ) -> UInt {
    
    return UInt(CLibTidy.tidyAccessWarningCount( tdoc ))
}


/**
 Indicates the number of configuration error messages that were generated.
 
 - parameters:
   - tdoc: An instance of a `TidyDoc` to query.
 - returns:
     Returns the number of configuration error messages that were generated.
*/
public func tidyConfigErrorCount( _ tdoc: TidyDoc ) -> UInt {
    
    return UInt(CLibTidy.tidyConfigErrorCount( tdoc ))
}


/**
 Write more complete information about errors to current error sink.
 
 - parameters:
   - tdoc: An instance of a `TidyDoc` to query.
*/
public func tidyErrorSummary( _ tdoc: TidyDoc ) {
    
    CLibTidy.tidyErrorSummary( tdoc )
}


/**
 Write more general information about markup to current error sink.
 
 - parameters:
   - tdoc: An instance of a `TidyDoc` to query.
*/
public func tidyGeneralInfo( _ tdoc: TidyDoc ) {
    
    CLibTidy.tidyGeneralInfo( tdoc )
}


/** 
 Load an ASCII Tidy configuration file and set the configuration per its
 contents.
 
 - parameters:
   - tdoc: The `TidyDoc` to which to apply the configuration.
   - configFile: The complete path to the file to load.
 - returns: 
     Returns `0` upon success, or any other value if there was an error.
*/
public func tidyLoadConfig( _ tdoc: TidyDoc, _ configFile: String ) -> Int {
    
    return Int( CLibTidy.tidyLoadConfig( tdoc, configFile ) )
}


/** 
 Load a Tidy configuration file with the specified character encoding, and
 set the configuration per its contents.
 
 - parameters:
   - tdoc: The `TidyDoc` to which to apply the configuration.
   - configFile: The complete path to the file to load.
   - charenc: The encoding to use. See struct `_enc2iana` for valid values.
 - returns: 
     Returns `0` upon success, or any other value if there was an error.
*/
public func tidyLoadConfigEnc( _ tdoc: TidyDoc, _ configFile: String, _ charenc: String ) -> Int {
    
    return Int( CLibTidy.tidyLoadConfigEnc( tdoc, configFile, charenc ) )
}


/**
 Determine whether or not a particular file exists. On Unix systems, the use
 of the tilde to represent the user's home directory is supported.
 
 - parameters:
   - tdoc: The `TidyDoc` on whose behalf you are checking.
   - filename: The path to the file whose existence you wish to check.
 - returns: 
     Returns `true` or `false`, indicating whether or not the file exists.
*/
public func tidyFileExists( _ tdoc: TidyDoc, _ filename: String ) -> Swift.Bool {
    
    return CLibTidy.tidyFileExists( tdoc, filename ) == yes ? true : false
}


// MARK: - Configuration, File, and Encoding Operations
// MARK: - Character Encoding


/** 
 Set the input/output character encoding for parsing markup. Valid values
 include `ascii`, `latin1`, `raw`, `utf8`, `iso2022`, `mac`, `win1252`,
 `utf16le`, `utf16be`, `utf16`, `big5`, and `shiftjis`. These values are not
 case sensitive.
 
 - Note: This is the same as using `TidySetInCharEncoding()` and
     `TidySetOutCharEncoding()` to set the same value.
 
 - parameters:
   - tdoc: The `TidyDoc` for which you are setting the encoding.
   - encnam: The encoding name as described above.
 - returns:
     Returns `0` upon success, or a system standard error number `EINVAL`.
*/
public func tidySetCharEncoding( _ tdoc: TidyDoc, _ encnam: String ) -> Int {
    
    return Int( CLibTidy.tidySetCharEncoding( tdoc, encnam ) )
}


/**
 Set the input encoding for parsing markup.  Valid values include `ascii`,
 `latin1`, `raw`, `utf8`, `iso2022`, `mac`, `win1252`, `utf16le`, `utf16be`,
 `utf16`, `big5`, and `shiftjis`. These values are not case sensitive.
 
 - parameters:
   - tdoc: The `TidyDoc` for which you are setting the encoding.
   - encnam: The encoding name as described above.
 - returns:
     Returns `0` upon success, or a system standard error number `EINVAL`.
*/
public func tidySetInCharEncoding( _ tdoc: TidyDoc, _ encnam: String ) -> Int {
    
    return Int( CLibTidy.tidySetInCharEncoding( tdoc, encnam ) )
}


/**
 Set the input encoding for writing markup.  Valid values include `ascii`,
 `latin1`, `raw`, `utf8`, `iso2022`, `mac`, `win1252`, `utf16le`, `utf16be`,
 `utf16`, `big5`, and `shiftjis`. These values are not case sensitive.
 
 - parameters:
   - tdoc: The `TidyDoc` for which you are setting the encoding.
   - encnam: The encoding name as described above.
 - returns:
     Returns `0` upon success, or a system standard error number `EINVAL`.
*/
public func tidySetOutCharEncoding( _ tdoc: TidyDoc, _ encnam: String ) -> Int {
    
    return Int( CLibTidy.tidySetOutCharEncoding( tdoc, encnam ) )
}

 
// MARK: Configuration Callback Functions


/** 
 This typealias represents the required signature for your provided callback
 function should you wish to register one with `tidySetConfigCallback()`. Your
 callback function will be provided with the following parameters.
 
 - parameters:
   - tdoc: The `TidyDoc` trying to set a configuration.
   - option: The option name that was provided.
   - value: The option value that was provided
 - returns: 
     Your callback function will return `true` if it handles the provided
     option, or `false` if it does not. In the latter case, Tidy will issue an 
     error indicating the unknown configuration option.
*/
public typealias TidyConfigCallback = ( _ tdoc: TidyDoc, _ option: String, _ value: String ) -> Swift.Bool


/**
 Applications using TidyLib may want to augment command-line and configuration 
 file options. Setting this callback allows a LibTidy application developer to 
 examine command-line and configuration file options after LibTidy has examined
 them and failed to recognize them.
 
 - parameters:
   - tdoc: The document to apply the callback to.
   - swiftCallback: The name of a function of type `TidyConfigCallback` to
       serve as your callback.
 - returns:
     Returns `true` upon success.
*/
public func tidySetConfigCallback( _ tdoc: TidyDoc, _ swiftCallback: @escaping TidyConfigCallback ) -> Swift.Bool {

    // Let's turn our opaque reference to an ApplicationData into an instance.
    guard let ptrStorage = CLibTidy.tidyGetAppData(tdoc) else { return false }
    
    let storage: ApplicationData = Unmanaged<ApplicationData>
        .fromOpaque(ptrStorage)
        .takeUnretainedValue()
    
    storage.optionCallback = swiftCallback;

    // CLibTidy's callback will call into this closure.
    let localCallback: CLibTidy.TidyConfigCallback = { tdoc, option, value in
        
        guard let option = option,
            let value = value,
            let ptrStorage = CLibTidy.tidyGetAppData(tdoc)
        else { return no }
        
        let storage: ApplicationData = Unmanaged<ApplicationData>
            .fromOpaque(ptrStorage)
            .takeUnretainedValue()
        
        let result = storage.optionCallback!(tdoc!,
                                             String(cString: option),
                                             String(cString: value))
        
        return result ? yes : no
    }
    
    return CLibTidy.tidySetConfigCallback( tdoc, localCallback ) == yes ? true : false
}


// MARK: Option ID Discovery


/**
 Get ID of given Option
 
 - parameters:
   - opt: An instance of a `TidyOption` to query.
 - returns:
     The `TidyOptionId` of the given option.
*/
public func tidyOptGetId( _ opt: TidyOption ) -> TidyOptionId {
    return CLibTidy.tidyOptGetId( opt )
}


/**
 Returns the `TidyOptionId` (C enum value) by providing the name of a Tidy
 configuration option.
 
 - parameters:
   - optnam: The name of the option ID to retrieve.
 - returns: 
     The `TidyOptionId` of the given `optname`.
*/
public func tidyOptGetIdForName( _ optnam: String) -> TidyOptionId {
    return CLibTidy.tidyOptGetIdForName( optnam )
}


// MARK: Getting Instances of Tidy Options


/**
 Returns an array of `TidyOption` tokens containing each Tidy option, which are
 an opaque type that can be interrogated with other LibTidy functions.
 
 - Note: This function will return internal-only option types including
     `TidyInternalCategory`; you should *never* use these. Always ensure
     that you use `tidyOptGetCategory()` before assuming that an option
     is okay to use in your application.
 
 - Note: This Swift array replaces the CLibTidy functions `tidyGetOptionList()`
     and `TidyGetNextOption()`, as it is much more natural to deal with Swift
     array types when using Swift.
 
 - parameters:
   - tdoc: The tidy document for which to retrieve options.
 - returns:
     Returns an array of `TidyOption` opaque tokens.
*/
public func tidyGetOptionList( _ tdoc: TidyDoc ) -> [TidyOption] {
    
    var itOpt: TidyIterator? = CLibTidy.tidyGetOptionList( tdoc )
    
    var result : [TidyOption] = []
    
    while ( itOpt != nil ) {
        
        if let opt = CLibTidy.tidyGetNextOption(tdoc, &itOpt) {
            result.append(opt)
        }
    }
    
    return result
}


/**
 Retrieves an instance of `TidyOption` given a valid `TidyOptionId`.
 
 - parameters:
   - tdoc: The document for which you are retrieving the option.
   - optId: The `TidyOptionId` to retrieve.
 - returns:
     An instance of `TidyOption` matching the provided `TidyOptionId`.
*/
public func tidyGetOption( _ tdoc: TidyDoc, _ optId: TidyOptionId ) -> TidyOption {

    return CLibTidy.tidyGetOption( tdoc, optId )
}

 
/**
 Returns an instance of `TidyOption` by providing the name of a Tidy
 configuration option.
 
 - parameters:
   - tdoc: The document for which you are retrieving the option.
   - optnam: The name of the Tidy configuration option.
 - returns: 
     The `TidyOption` of the given `optname`.
*/
public func tidyGetOptionByName( _ tdoc: TidyDoc, _ optnam: String ) -> TidyOption {

    return CLibTidy.tidyGetOptionByName( tdoc, optnam )
}


// MARK: Information About Options


/**
 Get name of given option
 
 - parameters:
   - opt: An instance of a `TidyOption` to query.
 - returns:
     The name of the given option.
*/
public func tidyOptGetName( _ opt: TidyOption ) -> String {
 
    return String( cString: CLibTidy.tidyOptGetName( opt ) )
}

 
/**
 Get datatype of given option
 
 - parameters:
   - opt: An instance of a TidyOption to query.
 - returns: 
     The `TidyOptionType` of the given option.
*/
public func tidyOptGetType( _ opt: TidyOption ) -> TidyOptionType {
 
    return CLibTidy.tidyOptGetType( opt )
}


/** 
 Is Option read-only? Some options (mainly internal use only options) are
 read-only.
 
 - parameters:
   - opt: An instance of a `TidyOption` to query.
 - returns: 
     Returns `true` or `false` depending on whether or not the specified
     option is read-only.
*/
public func tidyOptIsReadOnly( _ opt: TidyOption ) -> Swift.Bool {

    return CLibTidy.tidyOptIsReadOnly( opt ) == yes ? true : false
}

 
/**
 Get category of given option
 
 - parameters:
   - opt: An instance of a `TidyOption` to query.
 - returns: 
     The `TidyConfigCategory` of the specified option.
*/
public func tidyOptGetCategory( _ opt: TidyOption ) -> TidyConfigCategory {
 
    return CLibTidy.tidyOptGetCategory( opt )
}

 
/** 
 Get default value of given option as a string
 
 - parameters:
   - opt: An instance of a `TidyOption` to query.
 - returns:
     A string indicating the default value of the specified option.
*/
public func tidyOptGetDefault( _ opt: TidyOption ) -> String {
 
    return String( cString: CLibTidy.tidyOptGetDefault( opt ) )
}

 
/**
 Get default value of given option as an unsigned integer
 
 - parameters:
   - opt: An instance of a `TidyOption` to query.
 - returns:
     An unsigned integer indicating the default value of the specified option.
*/
public func tidyOptGetDefaultInt( _ opt: TidyOption ) -> UInt {
 
    return UInt( tidyOptGetDefaultInt( opt ) )
}

 
/**
 Get default value of given option as a Boolean value
 
 - parameters:
   - opt: An instance of a `TidyOption` to query.
 - returns:
     A boolean indicating the default value of the specified option.
*/
public func tidyOptGetDefaultBool( _ opt: TidyOption ) -> Swift.Bool {
 
    return tidyOptGetDefaultBool( opt ) == yes ? true : false
}


/**
 Returns on array of strings indicating the available picklist values for the
 given `TidyOption`.
 
 - Note: This Swift array replaces the CLibTidy functions `tidyOptGetPickList()`
     and `tidyOptGetNextPick()`, as it is much more natural to deal with Swift
     array types when using Swift.
 
 - parameters:
   - opt: An instance of a `TidyOption` to query.
 - returns:
     An array of strings with the picklist values, if any.
*/
public func tidyOptGetPickList( _ opt: TidyOption ) -> [String] {
    
    var itPick: TidyIterator? = CLibTidy.tidyOptGetPickList( opt )
    
    var result : [String] = []
    
    while ( itPick != nil ) {
        
        if let pick = CLibTidy.tidyOptGetNextPick( opt, &itPick) {
            result.append( String( cString:pick ) )
        }
    }
    
    return result
}


// MARK: Option Value Functions


/** 
 Get the current value of the `TidyOptionId` for the given document.
 
 - Note: The `optId` *must* have a `TidyOptionType` of `TidyString`.

 - parameters:
   - tdoc: The tidy document whose option value you wish to check.
   - optId: The option ID whose value you wish to check.
 - returns: 
     The string value of the given optId.
*/
public func tidyOptGetValue( _ tdoc: TidyDoc, _ optId: TidyOptionId ) -> String {

    return String( cString: CLibTidy.tidyOptGetValue( tdoc, optId ) )
}

 
/**
 Set the option value as a string.

 - Note: The optId *must* have a `TidyOptionType` of `TidyString`.

 - parameters
   - tdoc: The tidy document for which to set the value.
   - optId: The `TidyOptionId` of the value to set.
   - val: The string value to set.
 - returns: 
     Returns a bool indicating success or failure.
*/
public func tidyOptSetValue( _ tdoc: TidyDoc, _ optId: TidyOptionId, _ val: String ) -> Swift.Bool {

    return CLibTidy.tidyOptSetValue( tdoc, optId, val ) == yes ? true : false
}

 
/** 
 Set named option value as a string, regardless of the `TidyOptionType`.
 
 - Note: This is good setter if you are unsure of the type.

 - parameters:
   - tdoc: The tidy document for which to set the value.
   - optnam: The name of the option to set; this is the string value from the
       UI, e.g., `error-file`.
   - val: The value to set, as a string.
 - returns:
     Returns a bool indicating success or failure.
*/
public func tidyOptParseValue( _ tdoc: TidyDoc, _ optnam: String, _ val: String ) -> Swift.Bool {

    return CLibTidy.tidyOptParseValue( tdoc, optnam, val ) == yes ? true : false
}

 
/** 
 Get current option value as an integer.
 
 - parameters:
   - tdoc: The tidy document for which to get the value.
   - optId: The option ID to get.
 - returns:
     Returns the integer value of the specified option.
*/
public func tidyOptGetInt( _ tdoc: TidyDoc, _ optId: TidyOptionId ) -> UInt {

    return UInt( CLibTidy.tidyOptGetInt( tdoc, optId) )
}

 
/**
 Set option value as an integer.
 
 - parameters
   - tdoc: The tidy document for which to set the value.
   - optId: The option ID to set.
   - val: The value to set.
 - returns:
     Returns a bool indicating success or failure.
*/
public func tidyOptSetInt( _ tdoc: TidyDoc, _ optId: TidyOptionId, _ val: UInt ) -> Swift.Bool {

    return CLibTidy.tidyOptSetInt( tdoc, optId, val ) == yes ? true : false
}

 
/** 
 Get current option value as a Boolean.
 
 - parameters:
   - tdoc: The tidy document for which to get the value.
   - optId: The option ID to get.
 - returns:
     Returns a bool indicating the value.
*/
public func tidyOptGetBool( _ tdoc: TidyDoc, _ optId: TidyOptionId ) -> Swift.Bool {
 
    return CLibTidy.tidyOptGetBool( tdoc, optId ) == yes ? true : false
}

 
/** 
 Set option value as a Boolean.
 
 - parameters:
   - tdoc: The tidy document for which to set the value.
   - optId: The option ID to set.
   - val: The value to set.
 - returns:
     Returns a bool indicating success or failure.
*/
public func tidyOptSetBool( _ tdoc: TidyDoc, _ optId: TidyOptionId, _ val: Swift.Bool ) -> Swift.Bool {
 
    return CLibTidy.tidyOptSetBool( tdoc, optId, val == true ? yes : no ) == yes ? true : false
}

 
/**
 Reset option to default value by ID.
 
 - parameters:
   - tdoc: The tidy document for which to reset the value.
   - opt: The option ID to reset.
 - returns:
     Returns a bool indicating success or failure.
*/
public func tidyOptResetToDefault( _ tdoc: TidyDoc, _ opt: TidyOptionId ) -> Swift.Bool {

    return CLibTidy.tidyOptResetToDefault( tdoc, opt ) == yes ? true : false
}

 
/**
 Reset all options to their default values.
 
 - parameters:
   - tdoc: The tidy document for which to reset all values.
 - returns: 
     Returns a bool indicating success or failure.
*/
public func tidyOptResetAllToDefault( _ tdoc: TidyDoc ) -> Swift.Bool {

    return CLibTidy.tidyOptResetAllToDefault( tdoc ) == yes ? true : false
}

 
/**
 Take a snapshot of current config settings.
 
 - parameters:
   - tdoc: The tidy document for which to take a snapshot.
 - returns:
     Returns a bool indicating success or failure.
*/
public func tidyOptSnapshot( _ tdoc: TidyDoc ) -> Swift.Bool {
 
    return CLibTidy.tidyOptSnapshot( tdoc ) == yes ? true : false
}

 
/**
 Apply a snapshot of config settings to a document, such as after document
 processing. This will ensure that any values which Tidy may have changed
 are back to the intended configuration.
 
 - parameters:
   - tdoc: The tidy document for which to apply a snapshot.
 - returns: 
     Returns a bool indicating success or failure.
*/
public func tidyOptResetToSnapshot( _ tdoc: TidyDoc ) -> Swift.Bool {
 
    return CLibTidy.tidyOptResetToSnapshot( tdoc ) == yes ? true : false
}

 
/**
 Any settings different than default?
 
 - parameters:
   - tdoc: The tidy document to check.
 - returns:
     Returns a bool indicating whether or not a difference exists.
*/
public func tidyOptDiffThanDefault( _ tdoc: TidyDoc ) -> Swift.Bool {
 
    return CLibTidy.tidyOptDiffThanDefault( tdoc ) == yes ? true : false
}

 
/**
 Any settings different than snapshot?
 
 - parameters:
   - tdoc: The tidy document to check.
 - returns:
     Returns a bool indicating whether or not a difference exists.
*/
public func tidyOptDiffThanSnapshot( _ tdoc: TidyDoc ) -> Swift.Bool {
 
    return CLibTidy.tidyOptDiffThanSnapshot( tdoc ) == yes ? true : false
}

 
/**
 Copy current configuration settings from one document to another.
 
 - parameters:
   - tdocTo: The destination tidy document.
   - tdocFrom: The source tidy document.
 - returns:
     Returns a bool indicating success or failure.
*/
public func tidyOptCopyConfig( _ tdocTo: TidyDoc, _ tdocFrom: TidyDoc ) -> Swift.Bool {
 
    return CLibTidy.tidyOptCopyConfig( tdocTo, tdocFrom ) == yes ? true : false
}

 
/**
 Get character encoding name. Used with `TidyCharEncoding`, 
 `TidyOutCharEncoding`, and `TidyInCharEncoding`.
 
 - parameters:
   - tdoc: The tidy document to query.
   - optId: The option ID whose value to check.
 - returns: 
     The encoding name as a string for the specified option.
*/
public func tidyOptGetEncName( _ tdoc: TidyDoc, _ optId: TidyOptionId ) -> String {
 
    return String( cString: CLibTidy.tidyOptGetEncName( tdoc, optId ) )
}

 
/**
 Get the current pick list value for the option ID, which can be useful for
 enum types.
 
 - parameters:
   - tdoc: The tidy document to query.
   - optId: The option ID whose value to check.
 - returns: 
     Returns a string indicating the current value of the given option.
*/
public func tidyOptGetCurrPick( _ tdoc: TidyDoc, _ optId: TidyOptionId ) -> String {
 
    return String( cString: CLibTidy.tidyOptGetCurrPick( tdoc, optId ) )
}


/**
 Returns on array of strings, where each string indicates a user-declared tag,
 including autonomous custom tags detected when `TidyUseCustomTags` is not set
 to `no`.
 
 - Note: This Swift array replaces the CLibTidy `tidyOptGetDeclTagList()`
     and `tidyOptGetNextDeclTag()` functions, as it is much more natural to 
     deal with Swift array types when using Swift.
 
 - parameters
   - tdoc: The TidyDoc for which to get user-declared tags.
   - optId: The option ID matching the type of tag to retrieve. This
       limits the scope of the tags to one of `TidyInlineTags`, `TidyBlockTags`,
       `TidyEmptyTags`, `TidyPreTags`. Note that autonomous custom tags (if
       used) are added to one of these option types, depending on the value of
       `TidyUseCustomTags`.
 - returns: 
     An array of strings with the tag names, if any.
*/
public func tidyOptGetDeclTagList( _ tdoc: TidyDoc, forOptionId optId: TidyOptionId ) -> [String] {
    
    var itTag: TidyIterator? = CLibTidy.tidyOptGetDeclTagList( tdoc )
    
    var result : [String] = []
    
    while ( itTag != nil ) {
        
        if let tag = CLibTidy.tidyOptGetNextDeclTag( tdoc, optId, &itTag) {
            result.append( String( cString: tag ) )
        }
    }
    
    return result
}

 
// MARK: Option Documentation
/*


/** 
 Get the description of the specified option.
 
 - returns: Returns a string containing a description of the given option.
*/
TIDY_EXPORT ctmbstr TIDY_CALL       tidyOptGetDoc(TidyDoc tdoc,  /**< The tidy document to query. */
TidyOption opt /**< The option ID of the option. */
);

 
/** Initiates an iterator for a list of options related to a given option. This
 ** iterator allows you to iterate through all of the related options, if any.
 ** In order to iterate through the options, initiate the iterator with this
 ** function, and then use tidyOptGetNextDocLinks() to retrieve the first and
 ** subsequent options. For example:
 ** @code{.c}
 **   TidyIterator itOpt = tidyOptGetDocLinksList( tdoc, TidyJoinStyles );
 **   while ( itOpt ) {
 **     TidyOption my_option = tidyOptGetNextDocLinks( tdoc, &itOpt );
 **     // do something with my_option
 **   }
 ** @endcode
 ** - returns: Returns a TidyIterator, which is a token used to represent the
 **         current position in a list within LibTidy.
*/
TIDY_EXPORT TidyIterator TIDY_CALL  tidyOptGetDocLinksList(TidyDoc tdoc,  /**< The tidy document to query. */
TidyOption opt /**< The option whose related options you wish to find. */
);

/** Given a valid TidyIterator initiated with tidyOptGetDocLinksList(), returns
 ** a TidyOption instance.
 ** - returns: Returns in instane of TidyOption.
*/
TIDY_EXPORT TidyOption TIDY_CALL    tidyOptGetNextDocLinks(TidyDoc tdoc,     /**< The tidy document to query. */
TidyIterator* pos /**< The TidyIterator (initiated with tidyOptGetDocLinksList()) token. */
);


*/
// MARK: - I/O and Messages
/*
     

/***************************************************************************//**
 ** Tidy provides flexible I/O. By default, Tidy will define, create and use
 ** instances of input and output handlers for standard C buffered I/O (i.e.,
 ** `FILE* stdin`, `FILE* stdout`, and `FILE* stderr` for content input,
 ** content output and diagnostic output, respectively. A `FILE* cfgFile`
 ** input handler will be used for config files. Command line options will
 ** just be set directly.
 ******************************************************************************/


TIDY_STRUCT struct _TidyBuffer;
typedef struct _TidyBuffer TidyBuffer;

 
*/
// MARK: - Emacs-compatible reporting support
/*

 
/**
 Set the file path to use for reports when `TidyEmacs` is being used. This
 function provides a proper interface for using the hidden, internal-only
 `TidyEmacsFile` configuration option.
 
 - Note: This is useful if you work with Emacs and prefer Tidy's report
     output to be in a form that is easy for Emacs to parse
 
 - parameter tdoc: The tidy document for which you are setting the filePath.
 - parameter filePath: The path of the document that should be reported.
*/
TIDY_EXPORT void TIDY_CALL tidySetEmacsFile(TidyDoc tdoc, ctmbstr filePath );

/** 
 Get the file path to use for reports when `TidyEmacs` is being used. This
 function provides a proper interface for using the hidden, internal-only
 `TidyEmacsFile` configuration option.
 
 - parameter tdoc: The tidy document for which you want to fetch the file path.
 - returns: Returns a string indicating the file path.
*/
TIDY_EXPORT ctmbstr TIDY_CALL tidyGetEmacsFile( TidyDoc tdoc );

 
*/
// MARK: Error Sink
/*
 
 
/** 
 Set error sink to named file.
 
 - returns: Returns a file handle.
*/
TIDY_EXPORT FILE* TIDY_CALL tidySetErrorFile(TidyDoc tdoc,     /**< The document to set. */
    ctmbstr errfilnam /**< The file path to send output. */
);

/**
 Set error sink to given buffer.
 
 - returns: Returns 0 upon success or a standard error number.
*/
TIDY_EXPORT int TIDY_CALL tidySetErrorBuffer(TidyDoc tdoc,      /**< The document to set. */
    TidyBuffer* errbuf /**< The TidyBuffer to collect output. */
);

/** 
 Set error sink to given generic sink.
 
 - returns: Returns 0 upon success or a standard error number.
*/
TIDY_EXPORT int TIDY_CALL tidySetErrorSink(TidyDoc tdoc,        /**< The document to set. */
    TidyOutputSink* sink /**< The TidyOutputSink to collect output. */
);


*/
// MARK: Error and Message Callbacks - TidyMessageCallback
/*


/***************************************************************************//**
 A sophisticated and extensible callback to filter or collect messages
 reported by Tidy. It returns only an opaque type `TidyMessage` for every
 report and dialogue message, and this message can be queried with the
 TidyMessageCallback API, below. Note that unlike the older filters, this
 callback exposes *all* output that LibTidy emits (excluding the console
 application, which is a client of LibTidy).
 ******************************************************************************/

 
/** 
 This typedef represents the required signature for your provided callback
 function should you wish to register one with tidySetMessageCallback().
 Your callback function will be provided with the following parameters.
 - parameter tmessage An opaque type used as a token against which other API
     calls can be made.
 - returns: Your callback function will return `yes` if Tidy should include the
     report in its own output sink, or `no` if Tidy should suppress it.
*/
typedef Bool (TIDY_CALL *TidyMessageCallback)( TidyMessage tmessage );

/** 
 This function informs Tidy to use the specified callback to send reports.
 */
TIDY_EXPORT Bool TIDY_CALL tidySetMessageCallback(TidyDoc tdoc,                    /**< The tidy document for which the callback applies. */
    TidyMessageCallback filtCallback /**< A pointer to your callback function of type TidyMessageCallback. */
);
 

*/
// MARK: TidyMessageCallback API
/*


/** When using `TidyMessageCallback` you will be supplied with a TidyMessage
 ** object, which is used as a token to be interrogated with the following
 ** API before the callback returns.
 ** @remark Upon returning from the callback, this object is destroyed so do
 ** not attempt to copy it, or keep it around, or use it in any way.
*/

/**
 Get the tidy document this message comes from.
 
 - parameter tmessage: Specify the message that you are querying.
 - returns: Returns the TidyDoc that generated the message.
*/
TIDY_EXPORT TidyDoc TIDY_CALL tidyGetMessageDoc( TidyMessage tmessage );

 
/**
 Get the message code.
 
 - parameter tmessage: Specify the message that you are querying.
 - returns: Returns a code representing the message. This code can be used
     directly with the localized strings API; however we never make
     any guarantees about the value of these codes. For code stability
     don't store this value in your own application. Instead use the
     enum field or use the message key string value.
*/
TIDY_EXPORT uint TIDY_CALL tidyGetMessageCode( TidyMessage tmessage );

 
/** 
 Get the message key string.
 
 - parameter tmessage: Specify the message that you are querying.
 - returns: Returns a string representing the message. This string is intended
     to be stable by the LibTidy API, and is suitable for use as a key
     in your own applications.
*/
TIDY_EXPORT ctmbstr TIDY_CALL tidyGetMessageKey( TidyMessage tmessage );

 
/**
 Get the line number the message applies to.
 
 - parameter tmessage: Specify the message that you are querying.
 - returns: Returns the line number, if any, that generated the message.
*/
TIDY_EXPORT int TIDY_CALL tidyGetMessageLine( TidyMessage tmessage );

 
/** 
 Get the column the message applies to.
 
 - parameter tmessage: Specify the message that you are querying.
 - returns: Returns the column number, if any, that generated the message.
*/
TIDY_EXPORT int TIDY_CALL tidyGetMessageColumn( TidyMessage tmessage );

 
/**
 Get the TidyReportLevel of the message.
 
 - parameter tmessage: Specify the message that you are querying.
 - returns: Returns a TidyReportLevel indicating the severity or status of the
     message.
*/
TIDY_EXPORT TidyReportLevel TIDY_CALL tidyGetMessageLevel( TidyMessage tmessage );

 
/** 
 Get the default format string, which is the format string for the message
 in Tidy's default localization (en_us).
 
 - parameter tmessage: Specify the message that you are querying.
 - returns: Returns the default localization format string of the message.
*/
TIDY_EXPORT ctmbstr TIDY_CALL tidyGetMessageFormatDefault( TidyMessage tmessage );

 
/**
 Get the localized format string. If a localized version of the format string
 doesn't exist, then the default version will be returned.
 
 - parameter tmessage: Specify the message that you are querying.
 - returns: Returns the localized format string of the message.
*/
TIDY_EXPORT ctmbstr TIDY_CALL tidyGetMessageFormat( TidyMessage tmessage );

 
/** 
 Get the message with the format string already completed, in Tidy's
 default localization.

 - parameter tmessage: Specify the message that you are querying.
 - returns: Returns the message in the default localization.
*/
TIDY_EXPORT ctmbstr TIDY_CALL tidyGetMessageDefault( TidyMessage tmessage );

 
/** 
 Get the message with the format string already completed, in Tidy's
 current localization.
 
 - parameter tmessage: Specify the message that you are querying.
 - returns: Returns the message in the current localization.
*/
TIDY_EXPORT ctmbstr TIDY_CALL tidyGetMessage( TidyMessage tmessage );

 
/** 
 Get the position part part of the message in the default language.

 - parameter tmessage: Specify the message that you are querying.
 - returns: Returns the positional part of a string as Tidy would display it
     in the console application.
*/
TIDY_EXPORT ctmbstr TIDY_CALL tidyGetMessagePosDefault( TidyMessage tmessage );

 
/** 
 Get the position part part of the message in the current language.

 - parameter tmessage: Specify the message that you are querying.
 - returns: Returns the positional part of a string as Tidy would display it
     in the console application.
*/
TIDY_EXPORT ctmbstr TIDY_CALL tidyGetMessagePos( TidyMessage tmessage );

 
/**
 Get the prefix part of a message in the default language.

 - parameter tmessage: Specify the message that you are querying.
 - returns: Returns the message prefix part of a string as Tidy would display
     it in the console application.
*/
TIDY_EXPORT ctmbstr TIDY_CALL tidyGetMessagePrefixDefault( TidyMessage tmessage );

 
/**
 Get the prefix part of a message in the current language.

 - parameter tmessage: Specify the message that you are querying.
 - returns: Returns the message prefix part of a string as Tidy would display
     it in the console application.
*/
TIDY_EXPORT ctmbstr TIDY_CALL tidyGetMessagePrefix( TidyMessage tmessage );

 
/**
 Get the complete message as Tidy would emit it in the default localization.
 
 - parameter tmessage: Specify the message that you are querying.
 - returns: Returns the complete message just as Tidy would display it on the
     console.
*/
TIDY_EXPORT ctmbstr TIDY_CALL tidyGetMessageOutputDefault( TidyMessage tmessage );

 
/**
 Get the complete message as Tidy would emit it in the current localization.
 
 - parameter tmessage: Specify the message that you are querying.
 - returns: Returns the complete message just as Tidy would display it on the
     console.
*/
TIDY_EXPORT ctmbstr TIDY_CALL tidyGetMessageOutput( TidyMessage tmessage );


*/
// MARK: TidyMessageCallback Arguments API
/*


/** When using `TidyMessageCallback` you will be supplied with a TidyMessage
 ** object which can be used as a token against which to query using this API.
 ** This API deals strictly with _arguments_ that a message may or may not have;
 ** these are the same arguments that Tidy would apply to a format string in
 ** order to fill in the placeholder fields and deliver a complete report or
 ** dialogue string to you.
*/

 
/** Initiates an iterator for a list of arguments related to a given message.
 ** This iterator allows you to iterate through all of the arguments, if any.
 ** In order to iterate through the arguments, initiate the iterator with this
 ** function, and then use tidyGetNextMessageArgument() to retrieve the first
 ** and subsequent arguments. For example:
 ** @code{.c}
 **   TidyIterator itArg = tidyGetMessageArguments( tmessage );
 **   while ( itArg ) {
 **     TidyMessageArgument my_arg = tidyGetNextMessageArgument( tmessage, &itArg );
 **     // do something with my_arg, such as inspect its value or format
 **   }
 ** @endcode
 ** - parameter tmessage The message about whose arguments you wish to query.
 ** - returns: Returns a TidyIterator, which is a token used to represent the
 **         current position in a list within LibTidy.
*/
TIDY_EXPORT TidyIterator TIDY_CALL tidyGetMessageArguments( TidyMessage tmessage );

 
/** Given a valid TidyIterator initiated with tidyGetMessageArguments(), returns
 ** an instance of the opaque type TidyMessageArgument, which serves as a token
 ** against which the remaining argument API functions may be used to query
 ** information.
 ** - returns: Returns an instance of TidyMessageArgument.
*/
TIDY_EXPORT TidyMessageArgument TIDY_CALL tidyGetNextMessageArgument(TidyMessage tmessage, /**< The message whose arguments you want to access. */
    TidyIterator* iter    /**< The TidyIterator (initiated with tidyOptGetDocLinksList()) token. */
);

 
/**
 Returns the `TidyFormatParameterType` of the given message argument.
 
 - returns: Returns the type of parameter of type TidyFormatParameterType.
*/
TIDY_EXPORT TidyFormatParameterType TIDY_CALL tidyGetArgType(TidyMessage tmessage,    /**< The message whose arguments you want to access. */
    TidyMessageArgument* arg /**< The argument that you are querying. */
);

 
/**
 Returns the format specifier of the given message argument. The memory for
 this string is cleared upon termination of the callback, so do be sure to
 make your own copy.
 
 - returns: Returns the format specifier string of the given argument.
*/
TIDY_EXPORT ctmbstr TIDY_CALL tidyGetArgFormat(TidyMessage tmessage,    /**< The message whose arguments you want to access. */
    TidyMessageArgument* arg /**< The argument that you are querying. */
);

 
/**
 Returns the string value of the given message argument. An assertion
 will be generated if the argument type is not a string.
 
 - returns: Returns the string value of the given argument.
*/
TIDY_EXPORT ctmbstr TIDY_CALL tidyGetArgValueString(TidyMessage tmessage,    /**< The message whose arguments you want to access. */
    TidyMessageArgument* arg /**< The argument that you are querying. */
);

 
/**
 Returns the unsigned integer value of the given message argument. An
 assertion will be generated if the argument type is not an unsigned int.
 
 - returns: Returns the unsigned integer value of the given argument.
*/
TIDY_EXPORT uint TIDY_CALL tidyGetArgValueUInt(TidyMessage tmessage,    /**< The message whose arguments you want to access. */
    TidyMessageArgument* arg /**< The argument that you are querying. */
);

 
/**
 Returns the integer value of the given message argument. An assertion
 will be generated if the argument type is not an integer.
 
 - returns: Returns the integer value of the given argument.
*/
TIDY_EXPORT int TIDY_CALL tidyGetArgValueInt(TidyMessage tmessage,    /**< The message whose arguments you want to access. */
    TidyMessageArgument* arg /**< The argument that you are querying. */
);

 
/**
 Returns the double value of the given message argument. An assertion
 will be generated if the argument type is not a double.
 
 - returns: Returns the double value of the given argument.
*/
TIDY_EXPORT double TIDY_CALL tidyGetArgValueDouble(TidyMessage tmessage,    /**< The message whose arguments you want to access. */
    TidyMessageArgument* arg /**< The argument that you are querying. */
);


*/
// MARK: Printing
/*

 
/** LibTidy applications can somewhat track the progress of the tidying process
 ** by using this provided callback. It relates where something in the source
 ** document ended up in the output.
*/

 
/**
 This typedef represents the required signature for your provided callback
 function should you wish to register one with tidySetMessageCallback().
 Your callback function will be provided with the following parameters.
 - parameter tdoc: Indicates the source tidy document.
 - parameter line Indicates the line in the source document at this point in the process.
 - parameter column: Indicates the column in the source document at this point in the process.
 - parameter destLine: Indicates the line number in the output document at this point in the process.
 - returns: Your callback function will return `yes` if Tidy should include the
 **         report in its own output sink, or `no` if Tidy should suppress it.
*/
typedef void (TIDY_CALL *TidyPPProgress)( TidyDoc tdoc, uint line, uint col, uint destLine );

 
/** 
 This function informs Tidy to use the specified callback for tracking the
 pretty-printing process progress.
*/
TIDY_EXPORT Bool TIDY_CALL   tidySetPrettyPrinterCallback(TidyDoc tdoc,
                                                          TidyPPProgress callback
);

 
*/
// MARK: - Document Parse:
/*

 
/***************************************************************************//**
 ** Functions for parsing markup from a given input source, as well as string
 ** and filename functions for added convenience. HTML/XHTML version determined
 ** from input.
 ******************************************************************************/

/**
 Parse markup in named file.
 
 - returns: Returns the highest of `2` indicating that errors were present in
     the docment, `1` indicating warnings, and `0` in the case of
     everything being okay.
*/
TIDY_EXPORT int TIDY_CALL         tidyParseFile(TidyDoc tdoc,    /**< The tidy document to use for parsing. */
    ctmbstr filename /**< The filename to parse. */
);

 
/**
 Parse markup from the standard input.
 
 - parameter tdoc: The tidy document to use for parsing.
 - returns: Returns the highest of `2` indicating that errors were present in
     the docment, `1` indicating warnings, and `0` in the case of
     everything being okay.
*/
TIDY_EXPORT int TIDY_CALL         tidyParseStdin( TidyDoc tdoc );

*/


/**
 Parse markup in given string.
 - returns: Returns the highest of `2` indicating that errors were present in
     the docment, `1` indicating warnings, and `0` in the case of
     everything being okay.
*/
public func tidyParseString( _ tdoc: TidyDoc, _ content: String ) -> Int {
    
    return Int( CLibTidy.tidyParseString(tdoc, content) )
}


/*

/**
 Parse markup in given buffer.
 
 - returns: Returns the highest of `2` indicating that errors were present in
     the docment, `1` indicating warnings, and `0` in the case of
     everything being okay.
*/
TIDY_EXPORT int TIDY_CALL         tidyParseBuffer(TidyDoc tdoc,   /**< The tidy document to use for parsing. */
    TidyBuffer* buf /**< The TidyBuffer containing data to parse. */
);

 
/**
 Parse markup in given generic input source.
 - returns: Returns the highest of `2` indicating that errors were present in
     the docment, `1` indicating warnings, and `0` in the case of
     everything being okay.
*/
TIDY_EXPORT int TIDY_CALL         tidyParseSource(TidyDoc tdoc,           /**< The tidy document to use for parsing. */
    TidyInputSource* source /**< A TidyInputSource containing data to parse. */
);

 
*/
// MARK: - Clean, Diagnostics, and Repair:
/*

 
/***************************************************************************//**
 ** After parsing the document, you can use these functions to attempt cleanup,
 ** repair, get additional diagnostics, and determine the document type.
 ******************************************************************************/

/**
 Execute configured cleanup and repair operations on parsed markup.
 
 - parameter tdoc: The tidy document to use.
 - returns: An integer representing the status.
*/
TIDY_EXPORT int TIDY_CALL         tidyCleanAndRepair( TidyDoc tdoc );

/**
 Run configured diagnostics on parsed and repaired markup. You must call
 tidyCleanAndRepair() before using this function.
 
 - parameter tdoc: The tidy document to use.
 - returns: An integer representing the status.
*/
TIDY_EXPORT int TIDY_CALL         tidyRunDiagnostics( TidyDoc tdoc );

/**
 Reports the document type into the output sink.
 
 - parameter tdoc: The tidy document to use.
 - returns: An integer representing the status.
*/
TIDY_EXPORT int TIDY_CALL         tidyReportDoctype( TidyDoc tdoc );


*/
// MARK: - Document Save Functions:
/*

 
/***************************************************************************//**
 ** Save currently parsed document to the given output sink. File name
 ** and string/buffer functions provided for convenience.
 ******************************************************************************/

/** 
 Save the tidy document to the named file.
 
 - returns: An integer representing the status.
*/
TIDY_EXPORT int TIDY_CALL         tidySaveFile(TidyDoc tdoc,    /**< The tidy document to save. */
    ctmbstr filename /**< The destination file name. */
);

 
/**
 Save the tidy document to standard output (FILE*).
 
 - parameter tdoc: The tidy document to save.
 - returns: An integer representing the status.
*/
TIDY_EXPORT int TIDY_CALL         tidySaveStdout( TidyDoc tdoc );

 
/**
 Save the tidy document to given TidyBuffer object.
 
 - returns: An integer representing the status.
*/
TIDY_EXPORT int TIDY_CALL         tidySaveBuffer(TidyDoc tdoc,   /**< The tidy document to save. */
    TidyBuffer* buf /**< The buffer to place the output. */
);

/** 
 Save the tidy document to an application buffer. If TidyShowMarkup and the
 document has no errors, or TidyForceOutput, then the current document (per
 the current configuration) will be pretty printed to this application
 buffer. The document byte length (not character length) will be placed into
 *buflen. The document will not be null terminated. If the buffer is not big
 enough, ENOMEM will be returned, else the actual document status.
 
 - returns: An integer representing the status.
*/
TIDY_EXPORT int TIDY_CALL         tidySaveString(TidyDoc tdoc,  /**< The tidy document to save. */
    tmbstr buffer, /**< The buffer to save to. */
    uint* buflen   /**< [out] The byte length written. */
);

 
/**
 Save to given generic output sink.
 
 - returns: An integer representing the status.
*/
TIDY_EXPORT int TIDY_CALL         tidySaveSink(TidyDoc tdoc,        /**< The tidy document to save. */
    TidyOutputSink* sink /**< The output sink to save to. */
);

 
/**
 Save current settings to named file. Only writes non-default values.
 
 - returns: An integer representing the status.
*/
TIDY_EXPORT int TIDY_CALL         tidyOptSaveFile(TidyDoc tdoc,  /**< The tidy document to save. */
    ctmbstr cfgfil /**< The filename to save the configuration to. */
);

 
/**
 Save current settings to given output sink. Only non-default values are 
 written.
 
 - returns: An integer representing the status.
*/
TIDY_EXPORT int TIDY_CALL         tidyOptSaveSink(TidyDoc tdoc,        /**< The tidy document to save. */
    TidyOutputSink* sink /**< The output sink to save the configuration to. */
);


*/
// MARK: - Document Tree:
/*

 
/***************************************************************************//**
 ** A parsed (and optionally repaired) document is represented by Tidy as a
 ** tree, much like a W3C DOM. This tree may be traversed using these
 ** functions. The following snippet gives a basic idea how these functions
 ** can be used.
 **
 ** @code{.c}
 ** void dumpNode( TidyNode tnod, int indent ) {
 **   TidyNode child;
 **
 **   for ( child = tidyGetChild(tnod); child; child = tidyGetNext(child) ) {
 **     ctmbstr name;
 **     switch ( tidyNodeGetType(child) ) {
 **     case TidyNode_Root:       name = "Root";                    break;
 **     case TidyNode_DocType:    name = "DOCTYPE";                 break;
 **     case TidyNode_Comment:    name = "Comment";                 break;
 **     case TidyNode_ProcIns:    name = "Processing Instruction";  break;
 **     case TidyNode_Text:       name = "Text";                    break;
 **     case TidyNode_CDATA:      name = "CDATA";                   break;
 **     case TidyNode_Section:    name = "XML Section";             break;
 **     case TidyNode_Asp:        name = "ASP";                     break;
 **     case TidyNode_Jste:       name = "JSTE";                    break;
 **     case TidyNode_Php:        name = "PHP";                     break;
 **     case TidyNode_XmlDecl:    name = "XML Declaration";         break;
 **
 **     case TidyNode_Start:
 **     case TidyNode_End:
 **     case TidyNode_StartEnd:
 **     default:
 **       name = tidyNodeGetName( child );
 **       break;
 **     }
 **     assert( name != NULL );
 **     printf( "\%*.*sNode: \%s\\n", indent, indent, " ", name );
 **     dumpNode( child, indent + 4 );
 **   }
 ** }
 **
 ** void dumpDoc( TidyDoc tdoc ) {
 **   dumpNode( tidyGetRoot(tdoc), 0 );
 ** }
 **
 ** void dumpBody( TidyDoc tdoc ) {
 **   dumpNode( tidyGetBody(tdoc), 0 );
 ** }
 ** @endcode
 **
 ** @{
 ******************************************************************************/


*/
// MARK: Nodes for Document Sections
/*


/** 
 Get the root node.
 
 - parameter tdoc: The document to query.
 - returns: Returns a tidy node.
*/
TIDY_EXPORT TidyNode TIDY_CALL    tidyGetRoot( TidyDoc tdoc );

/** 
 Get the HTML node.
 
 - parameter tdoc: The document to query.
 - returns: Returns a tidy node.
*/
TIDY_EXPORT TidyNode TIDY_CALL    tidyGetHtml( TidyDoc tdoc );

/** 
 Get the HEAD node.
 
 - parameter tdoc: The document to query.
 - returns: Returns a tidy node.
*/
TIDY_EXPORT TidyNode TIDY_CALL    tidyGetHead( TidyDoc tdoc );

/** 
 Get the BODY node.
 
 - parameter tdoc: The document to query.
 - returns: Returns a tidy node.
*/
TIDY_EXPORT TidyNode TIDY_CALL    tidyGetBody( TidyDoc tdoc );


*/
// MARK: Relative Nodes
/*


/** 
 Get the parent of the indicated node.
 
 - parameter tnod The node to query.
 - returns: Returns a tidy node.
*/
TIDY_EXPORT TidyNode TIDY_CALL    tidyGetParent( TidyNode tnod );

/** 
 Get the child of the indicated node.
 
 - parameter tnod The node to query.
 - returns: Returns a tidy node.
*/
TIDY_EXPORT TidyNode TIDY_CALL    tidyGetChild( TidyNode tnod );

/**
 Get the next sibling node.
 
 - parameter tnod The node to query.
 - returns: Returns a tidy node.
*/
TIDY_EXPORT TidyNode TIDY_CALL    tidyGetNext( TidyNode tnod );

/**
 Get the previous sibling node.
 
 - parameter tnod The node to query.
 - returns: Returns a tidy node.
*/
TIDY_EXPORT TidyNode TIDY_CALL    tidyGetPrev( TidyNode tnod );

 
*/
// MARK: Miscellaneous Node Functions
/*


/** 
 Remove the indicated node.
 
 - returns: Returns the next tidy node.
*/
TIDY_EXPORT TidyNode TIDY_CALL    tidyDiscardElement(TidyDoc tdoc, /**< The tidy document from which to remove the node. */
    TidyNode tnod /**< The node to remove */
);

 
*/
// MARK: Node Attribute Functions
/*


/** 
 Get the first attribute.
 
 - parameter tnod The node for which to get attributes.
 - returns: Returns an instance of TidyAttr.
*/
TIDY_EXPORT TidyAttr TIDY_CALL    tidyAttrFirst( TidyNode tnod );

 
/**
 Get the next attribute.
 
 - parameter tattr The current attribute, so the next one can be returned.
 - returns: Returns and instance of TidyAttr.
*/
TIDY_EXPORT TidyAttr TIDY_CALL    tidyAttrNext( TidyAttr tattr );

 
/**
 Get the name of a TidyAttr instance.
 - parameter tattr The tidy attribute to query.
 - returns: Returns a string indicating the name of the attribute.
*/
TIDY_EXPORT ctmbstr TIDY_CALL     tidyAttrName( TidyAttr tattr );

 
/** Get the value of a TidyAttr instance.
 ** - parameter tattr The tidy attribute to query.
 ** - returns: Returns a string indicating the value of the attribute.
*/
TIDY_EXPORT ctmbstr TIDY_CALL     tidyAttrValue( TidyAttr tattr );

 
/**
 Discard an attribute.
*/
TIDY_EXPORT void TIDY_CALL        tidyAttrDiscard(TidyDoc itdoc, /**< The tidy document from which to discard the attribute. */
    TidyNode tnod, /**< The node from which to discard the attribute. */
    TidyAttr tattr /**< The attribute to discard. */
);

 
/** 
 Get the attribute ID given a tidy attribute.
 
 - parameter tattr The attribute to query.
 - returns: Returns the TidyAttrId of the given attribute.
*/
TIDY_EXPORT TidyAttrId TIDY_CALL  tidyAttrGetId( TidyAttr tattr );

 
/**
 Indicates whether or not a given attribute is an event attribute.
 
 - parameter tattr The attribute to query.
 - returns: Returns a bool indicating whether or not the attribute is an event.
 **/
TIDY_EXPORT Bool TIDY_CALL        tidyAttrIsEvent( TidyAttr tattr );

 
/**
 Get an instance of TidyAttr by specifying an attribute ID.
 
 - returns: Returns a TidyAttr instance.
*/
TIDY_EXPORT TidyAttr TIDY_CALL    tidyAttrGetById(TidyNode tnod,   /**< The node to query. */
    TidyAttrId attId /**< The attribute ID to find. */
);

 
*/
// MARK: Additional Node Interrogation
/*


/**
 Get the type of node.
 
 - parameter tnod The node to query.
 - returns: Returns the type of node as TidyNodeType.
*/
TIDY_EXPORT TidyNodeType TIDY_CALL tidyNodeGetType( TidyNode tnod );

 
/**
 Get the name of the node.
 
 - parameter tnod The node to query.
 - returns: Returns a string indicating the name of the node.
*/
TIDY_EXPORT ctmbstr TIDY_CALL tidyNodeGetName( TidyNode tnod );

 
/**
 Indicates whether or not a node is a text node.
 
 - parameter tnod The node to query.
 - returns: Returns a bool indicating whether or not the node is a text node.
*/
TIDY_EXPORT Bool TIDY_CALL tidyNodeIsText( TidyNode tnod );

 
/**
 Indicates whether or not the node is a propriety type.
 
 - returns: Returns a bool indicating whether or not the node is a proprietary type.
*/
TIDY_EXPORT Bool TIDY_CALL tidyNodeIsProp(TidyDoc tdoc, /**< The document to query. */
    TidyNode tnod /**< The node to query */
);

 
/**
 Indicates whether or not a node represents and HTML header element, such
 as h1, h2, etc.
 
 - parameter tnod The node to query.
 - returns: Returns a bool indicating whether or not the node is an HTML header.
*/
TIDY_EXPORT Bool TIDY_CALL tidyNodeIsHeader( TidyNode tnod );

 
/**
 Indicates whether or not the node has text.
 
 - returns: Returns the type of node as TidyNodeType.
*/
TIDY_EXPORT Bool TIDY_CALL tidyNodeHasText(TidyDoc tdoc, /**< The document to query. */
    TidyNode tnod /**< The node to query. */
);

 
/**
 Gets the text of a node and places it into the given TidyBuffer.
 
 - returns: Returns a bool indicating success or not.
*/
TIDY_EXPORT Bool TIDY_CALL tidyNodeGetText(TidyDoc tdoc,   /**< The document to query. */
    TidyNode tnod,  /**< The node to query. */
    TidyBuffer* buf /**< [out] A TidyBuffer used to receive the node's text. */
);

 
/**
 Get the value of the node. This copies the unescaped value of this node into
 the given TidyBuffer at UTF-8.
 
 - returns: Returns a bool indicating success or not.
*/
TIDY_EXPORT Bool TIDY_CALL tidyNodeGetValue(TidyDoc tdoc,   /**< The document to query */
    TidyNode tnod,  /**< The node to query */
    TidyBuffer* buf /**< [out] A TidyBuffer used to receive the node's value. */
);

 
/**
 Get the tag ID of the node.
 
 - parameter tnod The node to query.
 - returns: Returns the tag ID of the node as TidyTagId.
*/
TIDY_EXPORT TidyTagId TIDY_CALL tidyNodeGetId( TidyNode tnod );

 
/**
 Get the line number where the node occurs.
 
 - parameter tnod The node to query.
 - returns: Returns the line number.
*/
TIDY_EXPORT uint TIDY_CALL tidyNodeLine( TidyNode tnod );

 
/**
 Get the column location of the node.
 
 - parameter tnod The node to query.
 - returns: Returns the column location of the node.
*/
TIDY_EXPORT uint TIDY_CALL tidyNodeColumn( TidyNode tnod );

 
*/
// MARK: - Message Key Management:
/*


/***************************************************************************//**
 ** These functions serve to manage message codes, i.e., codes that are used
 ** Tidy and communicated via its callback filters to represent reports and
 ** dialogue that Tidy emits.
 **
 ** @remark These codes only reflect complete messages, and are specifically
 **         distinct from the internal codes that are used to lookup individual
 **         strings for localization purposes.
 ******************************************************************************/

/**
 Given a message code, return the text key that represents it.
 
 - parameter code The error code to lookup.
 - returns: The string representing the error code.
*/
TIDY_EXPORT ctmbstr TIDY_CALL tidyErrorCodeAsKey(uint code);

/**
 Given a text key representing a message code, return the uint that
 represents it.
 
 - Note: We establish that for external purposes, the API will ensure that
     string keys remain consistent. *Never* count on the integer value
     of a message code. Always use this function to ensure that the
     integer is valid if you need one.
 - parameter code: The string representing the error code.
 - returns: Returns an integer that represents the error code, which can be
     used to lookup Tidy's built-in strings. If the provided string does
     not have a matching message code, then UINT_MAX will be returned.
*/
TIDY_EXPORT uint TIDY_CALL tidyErrorCodeFromKey(ctmbstr code);

 
/** Initiates an iterator for a list of message codes available in Tidy.
 ** This iterator allows you to iterate through all of the code. In orde to
 ** iterate through the codes, initiate the iterator with this function, and
 ** then use getNextErrorCode() to retrieve the first and subsequent codes.
 ** For example:
 ** @code{.c}
 **   TidyIterator itMessage = getErrorCodeList();
 **   while ( itMessage ) {
 **     uint code = getNextErrorCode( &itMessage );
 **     // do something with the code, such as lookup a string.
 **   }
 ** @endcode
 ** - returns: Returns a TidyIterator, which is a token used to represent the
 **         current position in a list within LibTidy.
*/
TIDY_EXPORT TidyIterator TIDY_CALL getErrorCodeList();

/** Given a valid TidyIterator initiated with getErrorCodeList(), returns
 ** an instance of the opaque type TidyMessageArgument, which serves as a token
 ** against which the remaining argument API functions may be used to query
 ** information.
 ** - parameter iter The TidyIterator (initiated with getErrorCodeList()) token.
 ** - returns: Returns a message code.
*/
TIDY_EXPORT uint TIDY_CALL getNextErrorCode( TidyIterator* iter );


*/
// MARK: - Localization Support:
/*


/***************************************************************************//**
 ** These functions help manage localization in Tidy. Note that these implement
 ** native CLibTidy localization; you'd probably want to implement your own
 ** mechanism to use native macOS localization.
 ******************************************************************************/


*/
// MARK: Tidy's Locale
/*


/** 
 Determines the current locale without affecting the C locale.
 
 - parameter result: The buffer to use to return the string, or NULL on failure.
 - returns: The same buffer for convenience.
*/
TIDY_EXPORT tmbstr TIDY_CALL tidySystemLocale(tmbstr result);

/** Tells Tidy to use a different language for output.
 ** - parameter  languageCode A Windows or POSIX language code, and must match
 **         a TIDY_LANGUAGE for an installed language.
 ** - returns: Indicates that a setting was applied, but not necessarily the
 **         specific request, i.e., true indicates a language and/or region
 **         was applied. If es_mx is requested but not installed, and es is
 **         installed, then es will be selected and this function will return
 **         true. However the opposite is not true; if es is requested but
 **         not present, Tidy will not try to select from the es_XX variants.
*/
TIDY_EXPORT Bool TIDY_CALL tidySetLanguage( ctmbstr languageCode );

 
/**
 Gets the current language used by Tidy.
 
 - returns: Returns a string indicating the currently set language.
*/
TIDY_EXPORT ctmbstr TIDY_CALL tidyGetLanguage();


*/
// MARK: Locale Mappings
/*


/** @struct tidyLocalMapItem
 ** Represents an opaque type we can use for tidyLocaleMapItem, which
 ** is used to iterate through the language list, and used to access
 ** the windowsName() and the posixName().
*/
/* Prevent Doxygen from listing this as a function. */
#ifndef DOXYGEN_SHOULD_SKIP_THIS
opaque_type(tidyLocaleMapItem);
#endif

/** Initiates an iterator for a list of Tidy's Windows<->POSIX locale mappings.
 ** This iterator allows you to iterate through this list. In order to
 ** iterate through the list, initiate the iterator with this function, and then
 ** use getNextWindowsLanguage() to retrieve the first and subsequent codes.
 ** For example:
 ** @code{.c}
 **   TidyIterator itList = getWindowsLanguageList();
 **   while ( itList ) {
 **     tidyLocaleMapItem *item = getNextWindowsLanguage( &itList );
 **     // do something such as get the TidyLangWindowsName(item).
 **   }
 ** @endcode
 ** - returns: Returns a TidyIterator, which is a token used to represent the
 **         current position in a list within LibTidy.
*/
TIDY_EXPORT TidyIterator TIDY_CALL getWindowsLanguageList();

/** Given a valid TidyIterator initiated with getWindowsLanguageList(), returns
 ** a pointer to a tidyLocaleMapItem, which can be further interrogated with
 ** TidyLangWindowsName() or TidyLangPosixName().
 ** - parameter iter The TidyIterator (initiated with getWindowsLanguageList()) token.
 ** - returns: Returns a pointer to a tidyLocaleMapItem.
*/
TIDY_EXPORT const tidyLocaleMapItem* TIDY_CALL getNextWindowsLanguage( TidyIterator* iter );

/** 
 Given a `tidyLocalMapItem`, return the Windows name.
 
 - parameter item: An instance of tidyLocalMapItem to query.
 - returns: Returns a string with the Windows name of the mapping.
*/
TIDY_EXPORT const ctmbstr TIDY_CALL TidyLangWindowsName( const tidyLocaleMapItem *item );

/** 
 Given a `tidyLocalMapItem`, return the POSIX name.
 
 - parameter item: An instance of tidyLocalMapItem to query.
 - returns: Returns a string with the POSIX name of the mapping.
*/
TIDY_EXPORT const ctmbstr TIDY_CALL TidyLangPosixName( const tidyLocaleMapItem *item );


*/
// MARK: Getting Localized Strings
/*


/** 
 Provides a string given `messageType` in the current localization for
 `quantity`. Some strings have one or more plural forms, and this function
 will ensure that the correct singular or plural form is returned for the
 specified quantity.
 
 - returns: Returns the desired string.
*/
TIDY_EXPORT ctmbstr TIDY_CALL tidyLocalizedStringN(uint messageType, /**< The message type. */
    uint quantity     /**< The quantity. */
);

 
/**
 Provides a string given `messageType` in the current localization for the
 single case.
 
 - parameter messageType The message type.
 - returns: Returns the desired string.
*/
TIDY_EXPORT ctmbstr TIDY_CALL tidyLocalizedString( uint messageType );

 
/** 
 Provides a string given `messageType` in the default localization (which
 is `en`).
 
 - parameter messageType The message type.
 - returns: Returns the desired string.
*/
TIDY_EXPORT ctmbstr TIDY_CALL tidyDefaultString( uint messageType );

 
/** Initiates an iterator for a list of string key codes available in Tidy.
 ** This iterator allows you to iterate through all of the codes. In order to
 ** iterate through the codes, initiate the iterator with this function, and
 ** then use getNextStringKey() to retrieve the first and subsequent codes.
 ** For example:
 ** @code{.c}
 **   TidyIterator itKey = getErrorCodeList();
 **   while ( itKey ) {
 **     uint code = getNextStringKey( &itKey );
 **     // do something with the code, such as lookup a string.
 **   }
 ** @endcode
 ** @remark These are provided for documentation generation purposes, and
 **         probably aren't of much use to the average LibTidy implementor.
 ** - returns: Returns a TidyIterator, which is a token used to represent the
 **         current position in a list within LibTidy.
*/
TIDY_EXPORT TidyIterator TIDY_CALL getStringKeyList();

/** Given a valid TidyIterator initiated with getStringKeyList(), returns
 ** an unsigned integer representing the next key value.
 ** @remark These are provided for documentation generation purposes, and
 **         probably aren't of much use to the average LibTidy implementor.
 ** - parameter iter The TidyIterator (initiated with getStringKeyList()) token.
 ** - returns: Returns a message code.
*/
TIDY_EXPORT uint TIDY_CALL getNextStringKey( TidyIterator* iter );


*/
// MARK: Available Languages
/*


/** Initiates an iterator for a list of Tidy's installed languages. This
 ** iterator allows you to iterate through this list. In order to iterate
 ** through the list, initiate the iterator with this function, and then use
 ** use getNextInstalledLanguage() to retrieve the first and subsequent strings.
 ** For example:
 ** @code{.c}
 **   TidyIterator itList = getInstalledLanguageList();
 **   while ( itList ) {
 **     printf("%s",  getNextInstalledLanguage( &itList ));
 **   }
 ** @endcode
 ** - returns: Returns a TidyIterator, which is a token used to represent the
 **         current position in a list within LibTidy.
*/
TIDY_EXPORT TidyIterator TIDY_CALL getInstalledLanguageList();

/** Given a valid TidyIterator initiated with getInstalledLanguageList(),
 ** returns a string representing a language name that is installed in Tidy.
 ** - parameter iter The TidyIterator (initiated with getInstalledLanguageList())
 **        token.
 ** - returns: Returns a string indicating the installed language.
*/
TIDY_EXPORT ctmbstr TIDY_CALL getNextInstalledLanguage( TidyIterator* iter );


*/


/******************************************************************************
 ** Private Stuff
 **************************************************************************** */
// MARK: - Private:


/**
 An instance of this class is retained by CLibTidy's AppData, and is used to
 store additional pointers that we cannot store in CLibTidy directly.
 - appData: Contains the pointer used by `tidySetAppData()`.
 - optionCallback: Contains the pointer used by `tidySetOptionCallback()`.
 - tidyMessageCallback: Contains the pointer used by `tidySetMessageCallback`.
*/
class ApplicationData {
    var appData: AnyObject?
    var optionCallback: TidyConfigCallback?
    var tidyMessageCallback: UnsafeMutableRawPointer? // this is swift native!
    
    init() {
        self.appData = nil
        self.optionCallback = nil
        self.tidyMessageCallback = nil
    }
}

/**
 CLibTidy bools are enum { no = 0, yes }, but get referenced by Swift as some
 stupid structure. Because we're using original CLibTidy source code, we can't
 wrap the original enum declaration with a magic macro, so we have to work
 around this limitation by working with the raw values of this dumb struct,
 where CLibTidy.no.rawValue = 0, CLibTidy.yes.rawValue = 1
*/
private func convertTidyToSwiftType( tidyBool: CLibTidy.Bool ) -> Swift.Bool {
    return tidyBool.rawValue == 1
}

